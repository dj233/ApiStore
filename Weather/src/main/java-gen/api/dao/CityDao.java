package api.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import api.dao.City;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_city".
*/
public class CityDao extends AbstractDao<City, Void> {

    public static final String TABLENAME = "TB_city";

    /**
     * Properties of entity City.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property City = new Property(0, String.class, "city", false, "CITY");
        public final static Property Cnty = new Property(1, String.class, "cnty", false, "CNTY");
        public final static Property Id = new Property(2, String.class, "id", false, "ID");
        public final static Property Lat = new Property(3, String.class, "lat", false, "LAT");
        public final static Property Lon = new Property(4, String.class, "lon", false, "LON");
        public final static Property Prov = new Property(5, String.class, "prov", false, "PROV");
    };


    public CityDao(DaoConfig config) {
        super(config);
    }
    
    public CityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_city\" (" + //
                "\"CITY\" TEXT NOT NULL ," + // 0: city
                "\"CNTY\" TEXT NOT NULL ," + // 1: cnty
                "\"ID\" TEXT NOT NULL ," + // 2: id
                "\"LAT\" TEXT NOT NULL ," + // 3: lat
                "\"LON\" TEXT NOT NULL ," + // 4: lon
                "\"PROV\" TEXT);"); // 5: prov
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_city\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, City entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCity());
        stmt.bindString(2, entity.getCnty());
        stmt.bindString(3, entity.getId());
        stmt.bindString(4, entity.getLat());
        stmt.bindString(5, entity.getLon());
 
        String prov = entity.getProv();
        if (prov != null) {
            stmt.bindString(6, prov);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public City readEntity(Cursor cursor, int offset) {
        City entity = new City( //
            cursor.getString(offset + 0), // city
            cursor.getString(offset + 1), // cnty
            cursor.getString(offset + 2), // id
            cursor.getString(offset + 3), // lat
            cursor.getString(offset + 4), // lon
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // prov
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, City entity, int offset) {
        entity.setCity(cursor.getString(offset + 0));
        entity.setCnty(cursor.getString(offset + 1));
        entity.setId(cursor.getString(offset + 2));
        entity.setLat(cursor.getString(offset + 3));
        entity.setLon(cursor.getString(offset + 4));
        entity.setProv(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(City entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(City entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
