package api.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import api.dao.WeatherIcon;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TB_weather_icon".
*/
public class WeatherIconDao extends AbstractDao<WeatherIcon, Void> {

    public static final String TABLENAME = "TB_weather_icon";

    /**
     * Properties of entity WeatherIcon.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Code = new Property(0, String.class, "code", false, "CODE");
        public final static Property Txt = new Property(1, String.class, "txt", false, "TXT");
        public final static Property Txt_en = new Property(2, String.class, "txt_en", false, "TXT_EN");
        public final static Property Icon = new Property(3, String.class, "icon", false, "ICON");
    };


    public WeatherIconDao(DaoConfig config) {
        super(config);
    }
    
    public WeatherIconDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TB_weather_icon\" (" + //
                "\"CODE\" TEXT NOT NULL ," + // 0: code
                "\"TXT\" TEXT NOT NULL ," + // 1: txt
                "\"TXT_EN\" TEXT NOT NULL ," + // 2: txt_en
                "\"ICON\" TEXT NOT NULL );"); // 3: icon
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TB_weather_icon\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WeatherIcon entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getCode());
        stmt.bindString(2, entity.getTxt());
        stmt.bindString(3, entity.getTxt_en());
        stmt.bindString(4, entity.getIcon());
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public WeatherIcon readEntity(Cursor cursor, int offset) {
        WeatherIcon entity = new WeatherIcon( //
            cursor.getString(offset + 0), // code
            cursor.getString(offset + 1), // txt
            cursor.getString(offset + 2), // txt_en
            cursor.getString(offset + 3) // icon
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WeatherIcon entity, int offset) {
        entity.setCode(cursor.getString(offset + 0));
        entity.setTxt(cursor.getString(offset + 1));
        entity.setTxt_en(cursor.getString(offset + 2));
        entity.setIcon(cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(WeatherIcon entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(WeatherIcon entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
